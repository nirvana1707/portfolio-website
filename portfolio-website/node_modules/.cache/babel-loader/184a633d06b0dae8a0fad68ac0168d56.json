{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbsorberInstance = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nclass AbsorberInstance {\n  constructor(absorbers, container, options, position) {\n    var _a, _b;\n\n    this.absorbers = absorbers;\n    this.container = container;\n    this.initialPosition = position;\n    this.options = options;\n    this.dragging = false;\n    this.name = this.options.name;\n    this.opacity = this.options.opacity;\n    this.size = Utils_1.NumberUtils.getValue(options.size) * container.retina.pixelRatio;\n    this.mass = this.size * options.size.density * container.retina.reduceFactor;\n    const limit = options.size.limit;\n    this.limit = limit !== undefined ? limit * container.retina.pixelRatio * container.retina.reduceFactor : limit;\n    const color = typeof options.color === \"string\" ? {\n      value: options.color\n    } : options.color;\n    this.color = (_a = Utils_1.ColorUtils.colorToRgb(color)) !== null && _a !== void 0 ? _a : {\n      b: 0,\n      g: 0,\n      r: 0\n    };\n    this.position = (_b = this.initialPosition) !== null && _b !== void 0 ? _b : this.calcPosition();\n  }\n\n  attract(particle) {\n    const options = this.options;\n\n    if (options.draggable) {\n      const mouse = this.container.interactivity.mouse;\n\n      if (mouse.clicking && mouse.downPosition) {\n        const mouseDist = Utils_1.NumberUtils.getDistance(this.position, mouse.downPosition);\n\n        if (mouseDist <= this.size) {\n          this.dragging = true;\n        }\n      } else {\n        this.dragging = false;\n      }\n\n      if (this.dragging && mouse.position) {\n        this.position.x = mouse.position.x;\n        this.position.y = mouse.position.y;\n      }\n    }\n\n    const pos = particle.getPosition();\n    const {\n      dx,\n      dy,\n      distance\n    } = Utils_1.NumberUtils.getDistances(this.position, pos);\n    const angle = Math.atan2(dx, dy);\n    const acceleration = this.mass / Math.pow(distance, 2) * this.container.retina.reduceFactor;\n\n    if (distance < this.size + particle.getRadius()) {\n      const sizeFactor = particle.getRadius() * 0.033 * this.container.retina.pixelRatio;\n\n      if (this.size > particle.getRadius() && distance < this.size - particle.getRadius()) {\n        if (options.destroy) {\n          particle.destroy();\n        } else {\n          particle.needsNewPosition = true;\n          this.updateParticlePosition(particle, angle, acceleration);\n        }\n      } else {\n        if (options.destroy) {\n          particle.size.value -= sizeFactor;\n        }\n\n        this.updateParticlePosition(particle, angle, acceleration);\n      }\n\n      if (this.limit === undefined || this.size < this.limit) {\n        this.size += sizeFactor;\n      }\n\n      this.mass += sizeFactor * this.options.size.density * this.container.retina.reduceFactor;\n    } else {\n      this.updateParticlePosition(particle, angle, acceleration);\n    }\n  }\n\n  resize() {\n    const initialPosition = this.initialPosition;\n    this.position = initialPosition && Utils_1.Utils.isPointInside(initialPosition, this.container.canvas.size) ? initialPosition : this.calcPosition();\n  }\n\n  draw(context) {\n    context.translate(this.position.x, this.position.y);\n    context.beginPath();\n    context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n    context.closePath();\n    context.fillStyle = Utils_1.ColorUtils.getStyleFromRgb(this.color, this.opacity);\n    context.fill();\n  }\n\n  calcPosition() {\n    var _a, _b;\n\n    const container = this.container;\n    const percentPosition = this.options.position;\n    return {\n      x: ((_a = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.x) !== null && _a !== void 0 ? _a : Math.random() * 100) / 100 * container.canvas.size.width,\n      y: ((_b = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.y) !== null && _b !== void 0 ? _b : Math.random() * 100) / 100 * container.canvas.size.height\n    };\n  }\n\n  updateParticlePosition(particle, angle, acceleration) {\n    var _a;\n\n    if (particle.destroyed) {\n      return;\n    }\n\n    const canvasSize = this.container.canvas.size;\n\n    if (particle.needsNewPosition) {\n      const pSize = particle.getRadius();\n      particle.position.x = Math.random() * (canvasSize.width - pSize * 2) + pSize;\n      particle.position.y = Math.random() * (canvasSize.height - pSize * 2) + pSize;\n      particle.needsNewPosition = false;\n    }\n\n    if (this.options.orbits) {\n      if (particle.orbitRadius === undefined) {\n        particle.orbitRadius = Utils_1.NumberUtils.getDistance(particle.getPosition(), this.position);\n      }\n\n      if (particle.orbitRadius <= this.size && !this.options.destroy) {\n        particle.orbitRadius = Math.random() * Math.max(canvasSize.width, canvasSize.height);\n      }\n\n      if (particle.orbitAngle === undefined) {\n        particle.orbitAngle = Math.random() * Math.PI * 2;\n      }\n\n      const orbitRadius = particle.orbitRadius;\n      const orbitAngle = particle.orbitAngle;\n      particle.velocity.horizontal = 0;\n      particle.velocity.vertical = 0;\n      particle.position.x = this.position.x + orbitRadius * Math.cos(orbitAngle);\n      particle.position.y = this.position.y + orbitRadius * Math.sin(orbitAngle);\n      particle.orbitRadius -= acceleration;\n      particle.orbitAngle += ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : this.container.retina.moveSpeed) / 100 * this.container.retina.reduceFactor;\n    } else {\n      particle.velocity.horizontal += Math.sin(angle) * acceleration;\n      particle.velocity.vertical += Math.cos(angle) * acceleration;\n    }\n  }\n\n}\n\nexports.AbsorberInstance = AbsorberInstance;","map":{"version":3,"sources":["F:/node-dir/anothertrial/portfolio-website/node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js"],"names":["Object","defineProperty","exports","value","AbsorberInstance","Utils_1","require","constructor","absorbers","container","options","position","_a","_b","initialPosition","dragging","name","opacity","size","NumberUtils","getValue","retina","pixelRatio","mass","density","reduceFactor","limit","undefined","color","ColorUtils","colorToRgb","b","g","r","calcPosition","attract","particle","draggable","mouse","interactivity","clicking","downPosition","mouseDist","getDistance","x","y","pos","getPosition","dx","dy","distance","getDistances","angle","Math","atan2","acceleration","pow","getRadius","sizeFactor","destroy","needsNewPosition","updateParticlePosition","resize","Utils","isPointInside","canvas","draw","context","translate","beginPath","arc","PI","closePath","fillStyle","getStyleFromRgb","fill","percentPosition","random","width","height","destroyed","canvasSize","pSize","orbits","orbitRadius","max","orbitAngle","velocity","horizontal","vertical","cos","sin","moveSpeed"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AbsorberInstance = void 0;\r\nconst Utils_1 = require(\"../../Utils\");\r\nclass AbsorberInstance {\r\n    constructor(absorbers, container, options, position) {\r\n        var _a, _b;\r\n        this.absorbers = absorbers;\r\n        this.container = container;\r\n        this.initialPosition = position;\r\n        this.options = options;\r\n        this.dragging = false;\r\n        this.name = this.options.name;\r\n        this.opacity = this.options.opacity;\r\n        this.size = Utils_1.NumberUtils.getValue(options.size) * container.retina.pixelRatio;\r\n        this.mass = this.size * options.size.density * container.retina.reduceFactor;\r\n        const limit = options.size.limit;\r\n        this.limit = limit !== undefined ? limit * container.retina.pixelRatio * container.retina.reduceFactor : limit;\r\n        const color = typeof options.color === \"string\" ? { value: options.color } : options.color;\r\n        this.color = (_a = Utils_1.ColorUtils.colorToRgb(color)) !== null && _a !== void 0 ? _a : {\r\n            b: 0,\r\n            g: 0,\r\n            r: 0,\r\n        };\r\n        this.position = (_b = this.initialPosition) !== null && _b !== void 0 ? _b : this.calcPosition();\r\n    }\r\n    attract(particle) {\r\n        const options = this.options;\r\n        if (options.draggable) {\r\n            const mouse = this.container.interactivity.mouse;\r\n            if (mouse.clicking && mouse.downPosition) {\r\n                const mouseDist = Utils_1.NumberUtils.getDistance(this.position, mouse.downPosition);\r\n                if (mouseDist <= this.size) {\r\n                    this.dragging = true;\r\n                }\r\n            }\r\n            else {\r\n                this.dragging = false;\r\n            }\r\n            if (this.dragging && mouse.position) {\r\n                this.position.x = mouse.position.x;\r\n                this.position.y = mouse.position.y;\r\n            }\r\n        }\r\n        const pos = particle.getPosition();\r\n        const { dx, dy, distance } = Utils_1.NumberUtils.getDistances(this.position, pos);\r\n        const angle = Math.atan2(dx, dy);\r\n        const acceleration = (this.mass / Math.pow(distance, 2)) * this.container.retina.reduceFactor;\r\n        if (distance < this.size + particle.getRadius()) {\r\n            const sizeFactor = particle.getRadius() * 0.033 * this.container.retina.pixelRatio;\r\n            if (this.size > particle.getRadius() && distance < this.size - particle.getRadius()) {\r\n                if (options.destroy) {\r\n                    particle.destroy();\r\n                }\r\n                else {\r\n                    particle.needsNewPosition = true;\r\n                    this.updateParticlePosition(particle, angle, acceleration);\r\n                }\r\n            }\r\n            else {\r\n                if (options.destroy) {\r\n                    particle.size.value -= sizeFactor;\r\n                }\r\n                this.updateParticlePosition(particle, angle, acceleration);\r\n            }\r\n            if (this.limit === undefined || this.size < this.limit) {\r\n                this.size += sizeFactor;\r\n            }\r\n            this.mass += sizeFactor * this.options.size.density * this.container.retina.reduceFactor;\r\n        }\r\n        else {\r\n            this.updateParticlePosition(particle, angle, acceleration);\r\n        }\r\n    }\r\n    resize() {\r\n        const initialPosition = this.initialPosition;\r\n        this.position =\r\n            initialPosition && Utils_1.Utils.isPointInside(initialPosition, this.container.canvas.size)\r\n                ? initialPosition\r\n                : this.calcPosition();\r\n    }\r\n    draw(context) {\r\n        context.translate(this.position.x, this.position.y);\r\n        context.beginPath();\r\n        context.arc(0, 0, this.size, 0, Math.PI * 2, false);\r\n        context.closePath();\r\n        context.fillStyle = Utils_1.ColorUtils.getStyleFromRgb(this.color, this.opacity);\r\n        context.fill();\r\n    }\r\n    calcPosition() {\r\n        var _a, _b;\r\n        const container = this.container;\r\n        const percentPosition = this.options.position;\r\n        return {\r\n            x: (((_a = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.x) !== null && _a !== void 0 ? _a : Math.random() * 100) / 100) * container.canvas.size.width,\r\n            y: (((_b = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.y) !== null && _b !== void 0 ? _b : Math.random() * 100) / 100) * container.canvas.size.height,\r\n        };\r\n    }\r\n    updateParticlePosition(particle, angle, acceleration) {\r\n        var _a;\r\n        if (particle.destroyed) {\r\n            return;\r\n        }\r\n        const canvasSize = this.container.canvas.size;\r\n        if (particle.needsNewPosition) {\r\n            const pSize = particle.getRadius();\r\n            particle.position.x = Math.random() * (canvasSize.width - pSize * 2) + pSize;\r\n            particle.position.y = Math.random() * (canvasSize.height - pSize * 2) + pSize;\r\n            particle.needsNewPosition = false;\r\n        }\r\n        if (this.options.orbits) {\r\n            if (particle.orbitRadius === undefined) {\r\n                particle.orbitRadius = Utils_1.NumberUtils.getDistance(particle.getPosition(), this.position);\r\n            }\r\n            if (particle.orbitRadius <= this.size && !this.options.destroy) {\r\n                particle.orbitRadius = Math.random() * Math.max(canvasSize.width, canvasSize.height);\r\n            }\r\n            if (particle.orbitAngle === undefined) {\r\n                particle.orbitAngle = Math.random() * Math.PI * 2;\r\n            }\r\n            const orbitRadius = particle.orbitRadius;\r\n            const orbitAngle = particle.orbitAngle;\r\n            particle.velocity.horizontal = 0;\r\n            particle.velocity.vertical = 0;\r\n            particle.position.x = this.position.x + orbitRadius * Math.cos(orbitAngle);\r\n            particle.position.y = this.position.y + orbitRadius * Math.sin(orbitAngle);\r\n            particle.orbitRadius -= acceleration;\r\n            particle.orbitAngle +=\r\n                (((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : this.container.retina.moveSpeed) / 100) * this.container.retina.reduceFactor;\r\n        }\r\n        else {\r\n            particle.velocity.horizontal += Math.sin(angle) * acceleration;\r\n            particle.velocity.vertical += Math.cos(angle) * acceleration;\r\n        }\r\n    }\r\n}\r\nexports.AbsorberInstance = AbsorberInstance;\r\n"]},"metadata":{},"sourceType":"script"}