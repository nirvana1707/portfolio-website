{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Plugins = void 0;\nconst plugins = [];\nconst presets = new Map();\nconst drawers = new Map();\n\nclass Plugins {\n  static getPlugin(plugin) {\n    return plugins.find(t => t.id === plugin);\n  }\n\n  static addPlugin(plugin) {\n    if (!Plugins.getPlugin(plugin.id)) {\n      plugins.push(plugin);\n    }\n  }\n\n  static getAvailablePlugins(container) {\n    const res = new Map();\n\n    for (const plugin of plugins) {\n      if (!plugin.needsPlugin(container.options)) {\n        continue;\n      }\n\n      res.set(plugin.id, plugin.getPlugin(container));\n    }\n\n    return res;\n  }\n\n  static loadOptions(options, sourceOptions) {\n    for (const plugin of plugins) {\n      plugin.loadOptions(options, sourceOptions);\n    }\n  }\n\n  static getPreset(preset) {\n    return presets.get(preset);\n  }\n\n  static addPreset(presetKey, options) {\n    if (!Plugins.getPreset(presetKey)) {\n      presets.set(presetKey, options);\n    }\n  }\n\n  static addShapeDrawer(type, drawer) {\n    if (!Plugins.getShapeDrawer(type)) {\n      drawers.set(type, drawer);\n    }\n  }\n\n  static getShapeDrawer(type) {\n    return drawers.get(type);\n  }\n\n  static getSupportedShapes() {\n    return drawers.keys();\n  }\n\n}\n\nexports.Plugins = Plugins;","map":{"version":3,"sources":["F:/node-dir/anothertrial/portfolio-website/node_modules/tsparticles/dist/Utils/Plugins.js"],"names":["Object","defineProperty","exports","value","Plugins","plugins","presets","Map","drawers","getPlugin","plugin","find","t","id","addPlugin","push","getAvailablePlugins","container","res","needsPlugin","options","set","loadOptions","sourceOptions","getPreset","preset","get","addPreset","presetKey","addShapeDrawer","type","drawer","getShapeDrawer","getSupportedShapes","keys"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AACA,MAAMC,OAAO,GAAG,EAAhB;AACA,MAAMC,OAAO,GAAG,IAAIC,GAAJ,EAAhB;AACA,MAAMC,OAAO,GAAG,IAAID,GAAJ,EAAhB;;AACA,MAAMH,OAAN,CAAc;AACM,SAATK,SAAS,CAACC,MAAD,EAAS;AACrB,WAAOL,OAAO,CAACM,IAAR,CAAcC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASH,MAA7B,CAAP;AACH;;AACe,SAATI,SAAS,CAACJ,MAAD,EAAS;AACrB,QAAI,CAACN,OAAO,CAACK,SAAR,CAAkBC,MAAM,CAACG,EAAzB,CAAL,EAAmC;AAC/BR,MAAAA,OAAO,CAACU,IAAR,CAAaL,MAAb;AACH;AACJ;;AACyB,SAAnBM,mBAAmB,CAACC,SAAD,EAAY;AAClC,UAAMC,GAAG,GAAG,IAAIX,GAAJ,EAAZ;;AACA,SAAK,MAAMG,MAAX,IAAqBL,OAArB,EAA8B;AAC1B,UAAI,CAACK,MAAM,CAACS,WAAP,CAAmBF,SAAS,CAACG,OAA7B,CAAL,EAA4C;AACxC;AACH;;AACDF,MAAAA,GAAG,CAACG,GAAJ,CAAQX,MAAM,CAACG,EAAf,EAAmBH,MAAM,CAACD,SAAP,CAAiBQ,SAAjB,CAAnB;AACH;;AACD,WAAOC,GAAP;AACH;;AACiB,SAAXI,WAAW,CAACF,OAAD,EAAUG,aAAV,EAAyB;AACvC,SAAK,MAAMb,MAAX,IAAqBL,OAArB,EAA8B;AAC1BK,MAAAA,MAAM,CAACY,WAAP,CAAmBF,OAAnB,EAA4BG,aAA5B;AACH;AACJ;;AACe,SAATC,SAAS,CAACC,MAAD,EAAS;AACrB,WAAOnB,OAAO,CAACoB,GAAR,CAAYD,MAAZ,CAAP;AACH;;AACe,SAATE,SAAS,CAACC,SAAD,EAAYR,OAAZ,EAAqB;AACjC,QAAI,CAAChB,OAAO,CAACoB,SAAR,CAAkBI,SAAlB,CAAL,EAAmC;AAC/BtB,MAAAA,OAAO,CAACe,GAAR,CAAYO,SAAZ,EAAuBR,OAAvB;AACH;AACJ;;AACoB,SAAdS,cAAc,CAACC,IAAD,EAAOC,MAAP,EAAe;AAChC,QAAI,CAAC3B,OAAO,CAAC4B,cAAR,CAAuBF,IAAvB,CAAL,EAAmC;AAC/BtB,MAAAA,OAAO,CAACa,GAAR,CAAYS,IAAZ,EAAkBC,MAAlB;AACH;AACJ;;AACoB,SAAdC,cAAc,CAACF,IAAD,EAAO;AACxB,WAAOtB,OAAO,CAACkB,GAAR,CAAYI,IAAZ,CAAP;AACH;;AACwB,SAAlBG,kBAAkB,GAAG;AACxB,WAAOzB,OAAO,CAAC0B,IAAR,EAAP;AACH;;AA1CS;;AA4CdhC,OAAO,CAACE,OAAR,GAAkBA,OAAlB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Plugins = void 0;\r\nconst plugins = [];\r\nconst presets = new Map();\r\nconst drawers = new Map();\r\nclass Plugins {\r\n    static getPlugin(plugin) {\r\n        return plugins.find((t) => t.id === plugin);\r\n    }\r\n    static addPlugin(plugin) {\r\n        if (!Plugins.getPlugin(plugin.id)) {\r\n            plugins.push(plugin);\r\n        }\r\n    }\r\n    static getAvailablePlugins(container) {\r\n        const res = new Map();\r\n        for (const plugin of plugins) {\r\n            if (!plugin.needsPlugin(container.options)) {\r\n                continue;\r\n            }\r\n            res.set(plugin.id, plugin.getPlugin(container));\r\n        }\r\n        return res;\r\n    }\r\n    static loadOptions(options, sourceOptions) {\r\n        for (const plugin of plugins) {\r\n            plugin.loadOptions(options, sourceOptions);\r\n        }\r\n    }\r\n    static getPreset(preset) {\r\n        return presets.get(preset);\r\n    }\r\n    static addPreset(presetKey, options) {\r\n        if (!Plugins.getPreset(presetKey)) {\r\n            presets.set(presetKey, options);\r\n        }\r\n    }\r\n    static addShapeDrawer(type, drawer) {\r\n        if (!Plugins.getShapeDrawer(type)) {\r\n            drawers.set(type, drawer);\r\n        }\r\n    }\r\n    static getShapeDrawer(type) {\r\n        return drawers.get(type);\r\n    }\r\n    static getSupportedShapes() {\r\n        return drawers.keys();\r\n    }\r\n}\r\nexports.Plugins = Plugins;\r\n"]},"metadata":{},"sourceType":"script"}