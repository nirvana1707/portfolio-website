{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particle = void 0;\n\nconst Updater_1 = require(\"./Particle/Updater\");\n\nconst Particles_1 = require(\"../Options/Classes/Particles/Particles\");\n\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\n\nconst Enums_1 = require(\"../Enums\");\n\nconst Utils_1 = require(\"../Utils\");\n\nconst Infecter_1 = require(\"./Particle/Infecter\");\n\nconst Mover_1 = require(\"./Particle/Mover\");\n\nclass Particle {\n  constructor(id, container, position, overrideOptions) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n    this.id = id;\n    this.container = container;\n    this.links = [];\n    this.fill = true;\n    this.close = true;\n    this.lastNoiseTime = 0;\n    this.destroyed = false;\n    this.misplaced = false;\n    const pxRatio = container.retina.pixelRatio;\n    const options = container.options;\n    const particlesOptions = new Particles_1.Particles();\n    particlesOptions.load(options.particles);\n    const shapeType = particlesOptions.shape.type;\n    const reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        const overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? Utils_1.Utils.itemFromArray(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n      }\n\n      const shapeOptions = new Shape_1.Shape();\n      shapeOptions.load(overrideOptions.shape);\n\n      if (this.shape) {\n        const shapeData = shapeOptions.options[this.shape];\n\n        if (shapeData) {\n          this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n        }\n      }\n    } else {\n      const shapeData = particlesOptions.shape.options[this.shape];\n\n      if (shapeData) {\n        this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n      }\n    }\n\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.particlesOptions = particlesOptions;\n    this.noiseDelay = Utils_1.NumberUtils.getValue(this.particlesOptions.move.noise.delay) * 1000;\n    container.retina.initParticle(this);\n    const color = this.particlesOptions.color;\n    const sizeOptions = this.particlesOptions.size;\n    const sizeValue = Utils_1.NumberUtils.getValue(sizeOptions) * container.retina.pixelRatio;\n    const randomSize = typeof sizeOptions.random === \"boolean\" ? sizeOptions.random : sizeOptions.random.enable;\n    this.size = {\n      value: sizeValue\n    };\n    this.direction = this.particlesOptions.move.direction;\n    this.bubble = {\n      inRange: false\n    };\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = {\n      horizontal: this.initialVelocity.horizontal,\n      vertical: this.initialVelocity.vertical\n    };\n    this.pathAngle = Math.atan2(this.initialVelocity.vertical, this.initialVelocity.horizontal);\n    const rotateOptions = this.particlesOptions.rotate;\n    this.rotate = {\n      value: (rotateOptions.random.enable ? Math.random() * 360 : rotateOptions.value) * Math.PI / 180\n    };\n    let rotateDirection = rotateOptions.direction;\n\n    if (rotateDirection === Enums_1.RotateDirection.random) {\n      const index = Math.floor(Math.random() * 2);\n      rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n    }\n\n    switch (rotateDirection) {\n      case Enums_1.RotateDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.rotate.status = Enums_1.AnimationStatus.decreasing;\n        break;\n\n      case Enums_1.RotateDirection.clockwise:\n        this.rotate.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n\n    const rotateAnimation = this.particlesOptions.rotate.animation;\n\n    if (rotateAnimation.enable) {\n      this.rotate.velocity = rotateAnimation.speed / 360 * container.retina.reduceFactor;\n\n      if (!rotateAnimation.sync) {\n        this.rotate.velocity *= Math.random();\n      }\n    }\n\n    const sizeAnimation = this.particlesOptions.size.animation;\n\n    if (sizeAnimation.enable) {\n      this.size.status = Enums_1.AnimationStatus.increasing;\n\n      if (!randomSize) {\n        switch (sizeAnimation.startValue) {\n          case Enums_1.StartValueType.min:\n            this.size.value = sizeAnimation.minimumValue * pxRatio;\n            break;\n\n          case Enums_1.StartValueType.random:\n            this.size.value = Utils_1.NumberUtils.randomInRange(sizeAnimation.minimumValue * pxRatio, this.size.value);\n            break;\n\n          case Enums_1.StartValueType.max:\n          default:\n            this.size.status = Enums_1.AnimationStatus.decreasing;\n            break;\n        }\n      }\n\n      this.size.velocity = ((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n\n    this.color = {\n      value: Utils_1.ColorUtils.colorToHsl(color, this.id, reduceDuplicates)\n    };\n    const colorAnimation = this.particlesOptions.color.animation;\n\n    if (colorAnimation.enable) {\n      this.color.velocity = colorAnimation.speed / 100 * container.retina.reduceFactor;\n\n      if (!colorAnimation.sync) {\n        this.color.velocity *= Math.random();\n      }\n    }\n\n    this.position = this.calcPosition(this.container, position);\n    this.initialPosition = {\n      x: this.position.x,\n      y: this.position.y\n    };\n    this.offset = {\n      x: 0,\n      y: 0\n    };\n    const opacityOptions = this.particlesOptions.opacity;\n    const randomOpacity = typeof opacityOptions.random === \"boolean\" ? opacityOptions.random : opacityOptions.random.enable;\n    this.opacity = {\n      value: Utils_1.NumberUtils.getValue(opacityOptions)\n    };\n    const opacityAnimation = opacityOptions.animation;\n\n    if (opacityAnimation.enable) {\n      this.opacity.status = Enums_1.AnimationStatus.increasing;\n\n      if (!randomOpacity) {\n        switch (opacityAnimation.startValue) {\n          case Enums_1.StartValueType.min:\n            this.opacity.value = opacityAnimation.minimumValue;\n            break;\n\n          case Enums_1.StartValueType.random:\n            this.opacity.value = Utils_1.NumberUtils.randomInRange(opacityAnimation.minimumValue, this.opacity.value);\n            break;\n\n          case Enums_1.StartValueType.max:\n          default:\n            this.opacity.status = Enums_1.AnimationStatus.decreasing;\n            break;\n        }\n      }\n\n      this.opacity.velocity = opacityAnimation.speed / 100 * container.retina.reduceFactor;\n\n      if (!opacityAnimation.sync) {\n        this.opacity.velocity *= Math.random();\n      }\n    }\n\n    this.sides = 24;\n    let drawer = container.drawers.get(this.shape);\n\n    if (!drawer) {\n      drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n\n    const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n\n    const imageShape = this.loadImageShape(container, drawer);\n\n    if (imageShape) {\n      this.image = imageShape.image;\n      this.fill = imageShape.fill;\n      this.close = imageShape.close;\n    }\n\n    this.stroke = this.particlesOptions.stroke instanceof Array ? Utils_1.Utils.itemFromArray(this.particlesOptions.stroke, this.id, reduceDuplicates) : this.particlesOptions.stroke;\n    this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n    this.strokeColor = {\n      value: (_h = Utils_1.ColorUtils.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.color.value\n    };\n\n    if (typeof this.stroke.color !== \"string\") {\n      const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n\n      if (strokeColorAnimation && this.strokeColor) {\n        if (strokeColorAnimation.enable) {\n          this.strokeColor.velocity = strokeColorAnimation.speed / 100 * container.retina.reduceFactor;\n\n          if (!strokeColorAnimation.sync) {\n            this.strokeColor.velocity = this.strokeColor.velocity * Math.random();\n          }\n        } else {\n          this.strokeColor.velocity = 0;\n        }\n\n        if (strokeColorAnimation.enable && !strokeColorAnimation.sync && this.strokeColor.value) {\n          this.strokeColor.value.h = Math.random() * 360;\n        }\n      }\n    }\n\n    const lifeOptions = particlesOptions.life;\n    this.lifeDelay = container.retina.reduceFactor ? Utils_1.NumberUtils.getValue(lifeOptions.delay) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0;\n    this.lifeDelayTime = 0;\n    this.lifeDuration = container.retina.reduceFactor ? Utils_1.NumberUtils.getValue(lifeOptions.duration) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0;\n    this.lifeTime = 0;\n    this.livesRemaining = particlesOptions.life.count;\n    this.spawning = this.lifeDelay > 0;\n\n    if (this.lifeDuration <= 0) {\n      this.lifeDuration = -1;\n    }\n\n    if (this.livesRemaining <= 0) {\n      this.livesRemaining = -1;\n    }\n\n    this.shadowColor = Utils_1.ColorUtils.colorToRgb(this.particlesOptions.shadow.color);\n    this.updater = new Updater_1.Updater(container, this);\n    this.infecter = new Infecter_1.Infecter(container);\n    this.mover = new Mover_1.Mover(container, this);\n  }\n\n  move(delta) {\n    this.mover.move(delta);\n  }\n\n  update(delta) {\n    this.updater.update(delta);\n  }\n\n  draw(delta) {\n    this.container.canvas.drawParticle(this, delta);\n  }\n\n  getPosition() {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y\n    };\n  }\n\n  getRadius() {\n    return this.bubble.radius || this.size.value;\n  }\n\n  getFillColor() {\n    var _a;\n\n    return (_a = this.bubble.color) !== null && _a !== void 0 ? _a : this.color.value;\n  }\n\n  getStrokeColor() {\n    var _a, _b;\n\n    return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : this.strokeColor.value) !== null && _b !== void 0 ? _b : this.color.value;\n  }\n\n  destroy() {\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    this.links = [];\n  }\n\n  calcPosition(container, position) {\n    var _a, _b;\n\n    for (const [, plugin] of container.plugins) {\n      const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n      if (pluginPos !== undefined) {\n        return Utils_1.Utils.deepExtend({}, pluginPos);\n      }\n    }\n\n    const pos = {\n      x: (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * container.canvas.size.width,\n      y: (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * container.canvas.size.height\n    };\n    const outMode = this.particlesOptions.move.outMode;\n\n    if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n      if (pos.x > container.canvas.size.width - this.size.value * 2) {\n        pos.x -= this.size.value;\n      } else if (pos.x < this.size.value * 2) {\n        pos.x += this.size.value;\n      }\n    }\n\n    if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n      if (pos.y > container.canvas.size.height - this.size.value * 2) {\n        pos.y -= this.size.value;\n      } else if (pos.y < this.size.value * 2) {\n        pos.y += this.size.value;\n      }\n    }\n\n    return pos;\n  }\n\n  calculateVelocity() {\n    const baseVelocity = Utils_1.NumberUtils.getParticleBaseVelocity(this);\n    const res = {\n      horizontal: 0,\n      vertical: 0\n    };\n    const moveOptions = this.particlesOptions.move;\n    let rad;\n    let radOffset = Math.PI / 4;\n\n    if (typeof moveOptions.angle === \"number\") {\n      rad = Math.PI / 180 * moveOptions.angle;\n    } else {\n      rad = Math.PI / 180 * moveOptions.angle.value;\n      radOffset = Math.PI / 180 * moveOptions.angle.offset;\n    }\n\n    const range = {\n      left: Math.sin(radOffset + rad / 2) - Math.sin(radOffset - rad / 2),\n      right: Math.cos(radOffset + rad / 2) - Math.cos(radOffset - rad / 2)\n    };\n\n    if (moveOptions.straight) {\n      res.horizontal = baseVelocity.x;\n      res.vertical = baseVelocity.y;\n\n      if (moveOptions.random) {\n        res.horizontal += Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;\n        res.vertical += Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;\n      }\n    } else {\n      res.horizontal = baseVelocity.x + Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;\n      res.vertical = baseVelocity.y + Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;\n    }\n\n    return res;\n  }\n\n  loadImageShape(container, drawer) {\n    var _a, _b, _c, _d, _e;\n\n    if (!(this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images)) {\n      return;\n    }\n\n    const imageDrawer = drawer;\n    const images = imageDrawer.getImages(container).images;\n    const imageData = this.shapeData;\n    const image = (_a = images.find(t => t.source === imageData.src)) !== null && _a !== void 0 ? _a : images[0];\n    const color = this.getFillColor();\n    let imageRes;\n\n    if (!image) {\n      return;\n    }\n\n    if (image.svgData !== undefined && imageData.replaceColor && color) {\n      const svgColoredData = Utils_1.ColorUtils.replaceColorSvg(image, color, this.opacity.value);\n      const svg = new Blob([svgColoredData], {\n        type: \"image/svg+xml\"\n      });\n      const domUrl = URL || window.URL || window.webkitURL || window;\n      const url = domUrl.createObjectURL(svg);\n      const img = new Image();\n      imageRes = {\n        data: image,\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: (_b = imageData.replaceColor) !== null && _b !== void 0 ? _b : imageData.replace_color,\n        source: imageData.src\n      };\n      img.addEventListener(\"load\", () => {\n        if (this.image) {\n          this.image.loaded = true;\n          image.element = img;\n        }\n\n        domUrl.revokeObjectURL(url);\n      });\n      img.addEventListener(\"error\", () => {\n        domUrl.revokeObjectURL(url);\n        Utils_1.Utils.loadImage(imageData.src).then(img2 => {\n          if (this.image && img2) {\n            image.element = img2.element;\n            this.image.loaded = true;\n          }\n        });\n      });\n      img.src = url;\n    } else {\n      imageRes = {\n        data: image,\n        loaded: true,\n        ratio: imageData.width / imageData.height,\n        replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n        source: imageData.src\n      };\n    }\n\n    if (!imageRes.ratio) {\n      imageRes.ratio = 1;\n    }\n\n    const fill = (_d = imageData.fill) !== null && _d !== void 0 ? _d : this.fill;\n    const close = (_e = imageData.close) !== null && _e !== void 0 ? _e : this.close;\n    return {\n      image: imageRes,\n      fill,\n      close\n    };\n  }\n\n}\n\nexports.Particle = Particle;","map":{"version":3,"sources":["F:/node-dir/anothertrial/portfolio-website/node_modules/tsparticles/dist/Core/Particle.js"],"names":["Object","defineProperty","exports","value","Particle","Updater_1","require","Particles_1","Shape_1","Enums_1","Utils_1","Infecter_1","Mover_1","constructor","id","container","position","overrideOptions","_a","_b","_c","_d","_e","_f","_g","_h","_j","links","fill","close","lastNoiseTime","destroyed","misplaced","pxRatio","retina","pixelRatio","options","particlesOptions","Particles","load","particles","shapeType","shape","type","reduceDuplicates","Array","Utils","itemFromArray","overrideShapeType","shapeOptions","Shape","shapeData","deepExtend","undefined","noiseDelay","NumberUtils","getValue","move","noise","delay","initParticle","color","sizeOptions","size","sizeValue","randomSize","random","enable","direction","bubble","inRange","initialVelocity","calculateVelocity","velocity","horizontal","vertical","pathAngle","Math","atan2","rotateOptions","rotate","PI","rotateDirection","RotateDirection","index","floor","counterClockwise","clockwise","status","AnimationStatus","decreasing","increasing","rotateAnimation","animation","speed","reduceFactor","sync","sizeAnimation","startValue","StartValueType","min","minimumValue","randomInRange","max","sizeAnimationSpeed","ColorUtils","colorToHsl","colorAnimation","calcPosition","initialPosition","x","y","offset","opacityOptions","opacity","randomOpacity","opacityAnimation","sides","drawer","drawers","get","Plugins","getShapeDrawer","set","sideCountFunc","getSidesCount","imageShape","loadImageShape","image","stroke","strokeWidth","width","strokeColor","strokeColorAnimation","h","lifeOptions","life","lifeDelay","lifeDelayTime","lifeDuration","duration","lifeTime","livesRemaining","count","spawning","shadowColor","colorToRgb","shadow","updater","Updater","infecter","Infecter","mover","Mover","delta","update","draw","canvas","drawParticle","getPosition","getRadius","radius","getFillColor","getStrokeColor","destroy","plugin","plugins","pluginPos","particlePosition","pos","height","outMode","isInArray","OutMode","bounce","bounceHorizontal","bounceVertical","baseVelocity","getParticleBaseVelocity","res","moveOptions","rad","radOffset","angle","range","left","sin","right","cos","straight","ShapeType","images","imageDrawer","getImages","imageData","find","t","source","src","imageRes","svgData","replaceColor","svgColoredData","replaceColorSvg","svg","Blob","domUrl","URL","window","webkitURL","url","createObjectURL","img","Image","data","loaded","ratio","replace_color","addEventListener","element","revokeObjectURL","loadImage","then","img2"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Particle = void 0;\r\nconst Updater_1 = require(\"./Particle/Updater\");\r\nconst Particles_1 = require(\"../Options/Classes/Particles/Particles\");\r\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\r\nconst Enums_1 = require(\"../Enums\");\r\nconst Utils_1 = require(\"../Utils\");\r\nconst Infecter_1 = require(\"./Particle/Infecter\");\r\nconst Mover_1 = require(\"./Particle/Mover\");\r\nclass Particle {\r\n    constructor(id, container, position, overrideOptions) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\r\n        this.id = id;\r\n        this.container = container;\r\n        this.links = [];\r\n        this.fill = true;\r\n        this.close = true;\r\n        this.lastNoiseTime = 0;\r\n        this.destroyed = false;\r\n        this.misplaced = false;\r\n        const pxRatio = container.retina.pixelRatio;\r\n        const options = container.options;\r\n        const particlesOptions = new Particles_1.Particles();\r\n        particlesOptions.load(options.particles);\r\n        const shapeType = particlesOptions.shape.type;\r\n        const reduceDuplicates = particlesOptions.reduceDuplicates;\r\n        this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\r\n        if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\r\n            if (overrideOptions.shape.type) {\r\n                const overrideShapeType = overrideOptions.shape.type;\r\n                this.shape =\r\n                    overrideShapeType instanceof Array\r\n                        ? Utils_1.Utils.itemFromArray(overrideShapeType, this.id, reduceDuplicates)\r\n                        : overrideShapeType;\r\n            }\r\n            const shapeOptions = new Shape_1.Shape();\r\n            shapeOptions.load(overrideOptions.shape);\r\n            if (this.shape) {\r\n                const shapeData = shapeOptions.options[this.shape];\r\n                if (shapeData) {\r\n                    this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array\r\n                        ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates)\r\n                        : shapeData);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            const shapeData = particlesOptions.shape.options[this.shape];\r\n            if (shapeData) {\r\n                this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\r\n            }\r\n        }\r\n        if (overrideOptions !== undefined) {\r\n            particlesOptions.load(overrideOptions);\r\n        }\r\n        if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\r\n            particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\r\n        }\r\n        this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\r\n        this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\r\n        this.particlesOptions = particlesOptions;\r\n        this.noiseDelay = Utils_1.NumberUtils.getValue(this.particlesOptions.move.noise.delay) * 1000;\r\n        container.retina.initParticle(this);\r\n        const color = this.particlesOptions.color;\r\n        const sizeOptions = this.particlesOptions.size;\r\n        const sizeValue = Utils_1.NumberUtils.getValue(sizeOptions) * container.retina.pixelRatio;\r\n        const randomSize = typeof sizeOptions.random === \"boolean\" ? sizeOptions.random : sizeOptions.random.enable;\r\n        this.size = {\r\n            value: sizeValue,\r\n        };\r\n        this.direction = this.particlesOptions.move.direction;\r\n        this.bubble = {\r\n            inRange: false,\r\n        };\r\n        this.initialVelocity = this.calculateVelocity();\r\n        this.velocity = {\r\n            horizontal: this.initialVelocity.horizontal,\r\n            vertical: this.initialVelocity.vertical,\r\n        };\r\n        this.pathAngle = Math.atan2(this.initialVelocity.vertical, this.initialVelocity.horizontal);\r\n        const rotateOptions = this.particlesOptions.rotate;\r\n        this.rotate = {\r\n            value: ((rotateOptions.random.enable ? Math.random() * 360 : rotateOptions.value) * Math.PI) / 180,\r\n        };\r\n        let rotateDirection = rotateOptions.direction;\r\n        if (rotateDirection === Enums_1.RotateDirection.random) {\r\n            const index = Math.floor(Math.random() * 2);\r\n            rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\r\n        }\r\n        switch (rotateDirection) {\r\n            case Enums_1.RotateDirection.counterClockwise:\r\n            case \"counterClockwise\":\r\n                this.rotate.status = Enums_1.AnimationStatus.decreasing;\r\n                break;\r\n            case Enums_1.RotateDirection.clockwise:\r\n                this.rotate.status = Enums_1.AnimationStatus.increasing;\r\n                break;\r\n        }\r\n        const rotateAnimation = this.particlesOptions.rotate.animation;\r\n        if (rotateAnimation.enable) {\r\n            this.rotate.velocity = (rotateAnimation.speed / 360) * container.retina.reduceFactor;\r\n            if (!rotateAnimation.sync) {\r\n                this.rotate.velocity *= Math.random();\r\n            }\r\n        }\r\n        const sizeAnimation = this.particlesOptions.size.animation;\r\n        if (sizeAnimation.enable) {\r\n            this.size.status = Enums_1.AnimationStatus.increasing;\r\n            if (!randomSize) {\r\n                switch (sizeAnimation.startValue) {\r\n                    case Enums_1.StartValueType.min:\r\n                        this.size.value = sizeAnimation.minimumValue * pxRatio;\r\n                        break;\r\n                    case Enums_1.StartValueType.random:\r\n                        this.size.value = Utils_1.NumberUtils.randomInRange(sizeAnimation.minimumValue * pxRatio, this.size.value);\r\n                        break;\r\n                    case Enums_1.StartValueType.max:\r\n                    default:\r\n                        this.size.status = Enums_1.AnimationStatus.decreasing;\r\n                        break;\r\n                }\r\n            }\r\n            this.size.velocity =\r\n                (((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100) *\r\n                    container.retina.reduceFactor;\r\n            if (!sizeAnimation.sync) {\r\n                this.size.velocity *= Math.random();\r\n            }\r\n        }\r\n        this.color = {\r\n            value: Utils_1.ColorUtils.colorToHsl(color, this.id, reduceDuplicates),\r\n        };\r\n        const colorAnimation = this.particlesOptions.color.animation;\r\n        if (colorAnimation.enable) {\r\n            this.color.velocity = (colorAnimation.speed / 100) * container.retina.reduceFactor;\r\n            if (!colorAnimation.sync) {\r\n                this.color.velocity *= Math.random();\r\n            }\r\n        }\r\n        this.position = this.calcPosition(this.container, position);\r\n        this.initialPosition = {\r\n            x: this.position.x,\r\n            y: this.position.y,\r\n        };\r\n        this.offset = {\r\n            x: 0,\r\n            y: 0,\r\n        };\r\n        const opacityOptions = this.particlesOptions.opacity;\r\n        const randomOpacity = typeof opacityOptions.random === \"boolean\" ? opacityOptions.random : opacityOptions.random.enable;\r\n        this.opacity = {\r\n            value: Utils_1.NumberUtils.getValue(opacityOptions),\r\n        };\r\n        const opacityAnimation = opacityOptions.animation;\r\n        if (opacityAnimation.enable) {\r\n            this.opacity.status = Enums_1.AnimationStatus.increasing;\r\n            if (!randomOpacity) {\r\n                switch (opacityAnimation.startValue) {\r\n                    case Enums_1.StartValueType.min:\r\n                        this.opacity.value = opacityAnimation.minimumValue;\r\n                        break;\r\n                    case Enums_1.StartValueType.random:\r\n                        this.opacity.value = Utils_1.NumberUtils.randomInRange(opacityAnimation.minimumValue, this.opacity.value);\r\n                        break;\r\n                    case Enums_1.StartValueType.max:\r\n                    default:\r\n                        this.opacity.status = Enums_1.AnimationStatus.decreasing;\r\n                        break;\r\n                }\r\n            }\r\n            this.opacity.velocity = (opacityAnimation.speed / 100) * container.retina.reduceFactor;\r\n            if (!opacityAnimation.sync) {\r\n                this.opacity.velocity *= Math.random();\r\n            }\r\n        }\r\n        this.sides = 24;\r\n        let drawer = container.drawers.get(this.shape);\r\n        if (!drawer) {\r\n            drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\r\n            if (drawer) {\r\n                container.drawers.set(this.shape, drawer);\r\n            }\r\n        }\r\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\r\n        if (sideCountFunc) {\r\n            this.sides = sideCountFunc(this);\r\n        }\r\n        const imageShape = this.loadImageShape(container, drawer);\r\n        if (imageShape) {\r\n            this.image = imageShape.image;\r\n            this.fill = imageShape.fill;\r\n            this.close = imageShape.close;\r\n        }\r\n        this.stroke =\r\n            this.particlesOptions.stroke instanceof Array\r\n                ? Utils_1.Utils.itemFromArray(this.particlesOptions.stroke, this.id, reduceDuplicates)\r\n                : this.particlesOptions.stroke;\r\n        this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\r\n        this.strokeColor = {\r\n            value: (_h = Utils_1.ColorUtils.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.color.value,\r\n        };\r\n        if (typeof this.stroke.color !== \"string\") {\r\n            const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\r\n            if (strokeColorAnimation && this.strokeColor) {\r\n                if (strokeColorAnimation.enable) {\r\n                    this.strokeColor.velocity = (strokeColorAnimation.speed / 100) * container.retina.reduceFactor;\r\n                    if (!strokeColorAnimation.sync) {\r\n                        this.strokeColor.velocity = this.strokeColor.velocity * Math.random();\r\n                    }\r\n                }\r\n                else {\r\n                    this.strokeColor.velocity = 0;\r\n                }\r\n                if (strokeColorAnimation.enable && !strokeColorAnimation.sync && this.strokeColor.value) {\r\n                    this.strokeColor.value.h = Math.random() * 360;\r\n                }\r\n            }\r\n        }\r\n        const lifeOptions = particlesOptions.life;\r\n        this.lifeDelay = container.retina.reduceFactor\r\n            ? ((Utils_1.NumberUtils.getValue(lifeOptions.delay) * (lifeOptions.delay.sync ? 1 : Math.random())) /\r\n                container.retina.reduceFactor) *\r\n                1000\r\n            : 0;\r\n        this.lifeDelayTime = 0;\r\n        this.lifeDuration = container.retina.reduceFactor\r\n            ? ((Utils_1.NumberUtils.getValue(lifeOptions.duration) * (lifeOptions.duration.sync ? 1 : Math.random())) /\r\n                container.retina.reduceFactor) *\r\n                1000\r\n            : 0;\r\n        this.lifeTime = 0;\r\n        this.livesRemaining = particlesOptions.life.count;\r\n        this.spawning = this.lifeDelay > 0;\r\n        if (this.lifeDuration <= 0) {\r\n            this.lifeDuration = -1;\r\n        }\r\n        if (this.livesRemaining <= 0) {\r\n            this.livesRemaining = -1;\r\n        }\r\n        this.shadowColor = Utils_1.ColorUtils.colorToRgb(this.particlesOptions.shadow.color);\r\n        this.updater = new Updater_1.Updater(container, this);\r\n        this.infecter = new Infecter_1.Infecter(container);\r\n        this.mover = new Mover_1.Mover(container, this);\r\n    }\r\n    move(delta) {\r\n        this.mover.move(delta);\r\n    }\r\n    update(delta) {\r\n        this.updater.update(delta);\r\n    }\r\n    draw(delta) {\r\n        this.container.canvas.drawParticle(this, delta);\r\n    }\r\n    getPosition() {\r\n        return {\r\n            x: this.position.x + this.offset.x,\r\n            y: this.position.y + this.offset.y,\r\n        };\r\n    }\r\n    getRadius() {\r\n        return this.bubble.radius || this.size.value;\r\n    }\r\n    getFillColor() {\r\n        var _a;\r\n        return (_a = this.bubble.color) !== null && _a !== void 0 ? _a : this.color.value;\r\n    }\r\n    getStrokeColor() {\r\n        var _a, _b;\r\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : this.strokeColor.value) !== null && _b !== void 0 ? _b : this.color.value;\r\n    }\r\n    destroy() {\r\n        this.destroyed = true;\r\n        this.bubble.inRange = false;\r\n        this.links = [];\r\n    }\r\n    calcPosition(container, position) {\r\n        var _a, _b;\r\n        for (const [, plugin] of container.plugins) {\r\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\r\n            if (pluginPos !== undefined) {\r\n                return Utils_1.Utils.deepExtend({}, pluginPos);\r\n            }\r\n        }\r\n        const pos = {\r\n            x: (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * container.canvas.size.width,\r\n            y: (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * container.canvas.size.height,\r\n        };\r\n        const outMode = this.particlesOptions.move.outMode;\r\n        if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\r\n            if (pos.x > container.canvas.size.width - this.size.value * 2) {\r\n                pos.x -= this.size.value;\r\n            }\r\n            else if (pos.x < this.size.value * 2) {\r\n                pos.x += this.size.value;\r\n            }\r\n        }\r\n        if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\r\n            if (pos.y > container.canvas.size.height - this.size.value * 2) {\r\n                pos.y -= this.size.value;\r\n            }\r\n            else if (pos.y < this.size.value * 2) {\r\n                pos.y += this.size.value;\r\n            }\r\n        }\r\n        return pos;\r\n    }\r\n    calculateVelocity() {\r\n        const baseVelocity = Utils_1.NumberUtils.getParticleBaseVelocity(this);\r\n        const res = {\r\n            horizontal: 0,\r\n            vertical: 0,\r\n        };\r\n        const moveOptions = this.particlesOptions.move;\r\n        let rad;\r\n        let radOffset = Math.PI / 4;\r\n        if (typeof moveOptions.angle === \"number\") {\r\n            rad = (Math.PI / 180) * moveOptions.angle;\r\n        }\r\n        else {\r\n            rad = (Math.PI / 180) * moveOptions.angle.value;\r\n            radOffset = (Math.PI / 180) * moveOptions.angle.offset;\r\n        }\r\n        const range = {\r\n            left: Math.sin(radOffset + rad / 2) - Math.sin(radOffset - rad / 2),\r\n            right: Math.cos(radOffset + rad / 2) - Math.cos(radOffset - rad / 2),\r\n        };\r\n        if (moveOptions.straight) {\r\n            res.horizontal = baseVelocity.x;\r\n            res.vertical = baseVelocity.y;\r\n            if (moveOptions.random) {\r\n                res.horizontal += Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;\r\n                res.vertical += Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;\r\n            }\r\n        }\r\n        else {\r\n            res.horizontal = baseVelocity.x + Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;\r\n            res.vertical = baseVelocity.y + Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;\r\n        }\r\n        return res;\r\n    }\r\n    loadImageShape(container, drawer) {\r\n        var _a, _b, _c, _d, _e;\r\n        if (!(this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images)) {\r\n            return;\r\n        }\r\n        const imageDrawer = drawer;\r\n        const images = imageDrawer.getImages(container).images;\r\n        const imageData = this.shapeData;\r\n        const image = (_a = images.find((t) => t.source === imageData.src)) !== null && _a !== void 0 ? _a : images[0];\r\n        const color = this.getFillColor();\r\n        let imageRes;\r\n        if (!image) {\r\n            return;\r\n        }\r\n        if (image.svgData !== undefined && imageData.replaceColor && color) {\r\n            const svgColoredData = Utils_1.ColorUtils.replaceColorSvg(image, color, this.opacity.value);\r\n            const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" });\r\n            const domUrl = URL || window.URL || window.webkitURL || window;\r\n            const url = domUrl.createObjectURL(svg);\r\n            const img = new Image();\r\n            imageRes = {\r\n                data: image,\r\n                loaded: false,\r\n                ratio: imageData.width / imageData.height,\r\n                replaceColor: (_b = imageData.replaceColor) !== null && _b !== void 0 ? _b : imageData.replace_color,\r\n                source: imageData.src,\r\n            };\r\n            img.addEventListener(\"load\", () => {\r\n                if (this.image) {\r\n                    this.image.loaded = true;\r\n                    image.element = img;\r\n                }\r\n                domUrl.revokeObjectURL(url);\r\n            });\r\n            img.addEventListener(\"error\", () => {\r\n                domUrl.revokeObjectURL(url);\r\n                Utils_1.Utils.loadImage(imageData.src).then((img2) => {\r\n                    if (this.image && img2) {\r\n                        image.element = img2.element;\r\n                        this.image.loaded = true;\r\n                    }\r\n                });\r\n            });\r\n            img.src = url;\r\n        }\r\n        else {\r\n            imageRes = {\r\n                data: image,\r\n                loaded: true,\r\n                ratio: imageData.width / imageData.height,\r\n                replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\r\n                source: imageData.src,\r\n            };\r\n        }\r\n        if (!imageRes.ratio) {\r\n            imageRes.ratio = 1;\r\n        }\r\n        const fill = (_d = imageData.fill) !== null && _d !== void 0 ? _d : this.fill;\r\n        const close = (_e = imageData.close) !== null && _e !== void 0 ? _e : this.close;\r\n        return {\r\n            image: imageRes,\r\n            fill,\r\n            close,\r\n        };\r\n    }\r\n}\r\nexports.Particle = Particle;\r\n"]},"metadata":{},"sourceType":"script"}